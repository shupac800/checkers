{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","javascripts/allowablemoves.js","javascripts/display.js","javascripts/game.js","javascripts/main.js","javascripts/player.js"],"names":[],"mappingstBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// AllowableMoves.js\r\n\r\n\"use strict\";\r\n\r\nlet AllowableMoves = {};\r\n\r\nAllowableMoves.buildAnalyzeGrid = function(matrix,row,col) {\r\n  // construct 5x5 grid around piece being analyzed, \"X\"\r\n  // C . . . D\r\n  // . A . B .\r\n  // . . X . .\r\n  // . E . F .\r\n  // G . . . H\r\n  var analyze = {};\r\n  console.log(matrix);\r\n  console.log(row,col);\r\n  analyze.x = matrix[row][col];\r\n\r\n  try {\r\n    analyze.a = Math.abs(matrix[row - 1][col - 1]);\r\n  }\r\n  catch(e){\r\n    analyze.a = 9;  // position is off the board\r\n  }\r\n  try {\r\n    analyze.b = Math.abs(matrix[row - 1][col + 1]);\r\n  }\r\n  catch(e){\r\n    analyze.b = 9;  // position is off the board\r\n  }\r\n  try {\r\n    analyze.c = Math.abs(matrix[row - 2][col - 2]);\r\n  }\r\n  catch(e){\r\n    analyze.c = 9;  // position is off the board\r\n  }\r\n  try {\r\n    analyze.d = Math.abs(matrix[row - 2][col + 2]);\r\n  }\r\n  catch(e){\r\n    analyze.d = 9;  // position is off the board\r\n  }\r\n  try {\r\n    analyze.e = Math.abs(matrix[row + 1][col - 1]);\r\n  }\r\n  catch(e){\r\n    analyze.e = 9;  // position is off the board\r\n  }\r\n  try {\r\n    analyze.f = Math.abs(matrix[row + 1][col + 1]);\r\n  }\r\n  catch(e){\r\n    analyze.f = 9;  // position is off the board\r\n  }\r\n  try {\r\n    analyze.g = Math.abs(matrix[row + 2][col - 2]);\r\n  }\r\n  catch(e){\r\n    analyze.g = 9;  // position is off the board\r\n  }\r\n  try {\r\n    analyze.g = Math.abs(matrix[row + 2][col + 2]);\r\n  }\r\n  catch(e){\r\n    analyze.g = 9;  // position is off the board\r\n  }\r\n  return analyze;\r\n};\r\n\r\nAllowableMoves.p1Ordinary = function(analyze) {\r\n  if ( (analyze.a === 0) ||                               // p1 forward move to A\r\n       (analyze.b === 0) ||                               // p1 forward move to B\r\n       ( (analyze.a === 2) && (analyze.c === 0) ) ||      // p1 forward jump to C\r\n       ( (analyze.b === 2) && (analyze.d === 0) ) ) {     // p1 forward jump to D\r\n    return true;  // moves are available for this piece\r\n  } else {\r\n    return false; // no moves available for this piece\r\n  }\r\n};\r\nAllowableMoves.p1King = function(analyze) {\r\n  if ( (analyze.e === 0) ||                               // p1 backward move to E\r\n       (analyze.f === 0) ||                               // p1 backward move to F\r\n       ( (analyze.e === 2) && (analyze.g === 0) ) ||      // p1 backward jump to G\r\n       ( (analyze.f === 2) && (analyze.h === 0) ) ) {     // p1 backward jump to H\r\n    return true;  // moves are available for this piece\r\n  } else {\r\n    return false; // no moves available for this piece\r\n  }\r\n};\r\nAllowableMoves.p2Ordinary = function(analyze) {\r\n  if ( (analyze.e === 0) ||                               // p2 forward move to E\r\n       (analyze.f === 0) ||                               // p2 forward move to F\r\n       ( (analyze.e === 1) && (analyze.g === 0) ) ||      // p2 forward jump to G\r\n       ( (analyze.f === 1) && (analyze.h === 0) ) ) {     // p2 forward jump to H\r\n    return true;  // moves are available for this piece\r\n  } else {\r\n    return false; // no moves available for this piece\r\n  }\r\n};\r\nAllowableMoves.p2King = function(analyze) {\r\n  if ( (analyze.a === 0) ||                               // p2 backward move to A\r\n       (analyze.b === 0) ||                               // p2 backward move to B\r\n       ( (analyze.a === 1) && (analyze.c === 0) ) ||      // p2 backward jump to C\r\n       ( (analyze.b === 1) && (analyze.d === 0) ) ) {     // p2 backward jump to D\r\n    return true;  // moves are available for this piece\r\n  } else {\r\n    return false; // no moves available for this piece\r\n  }\r\n};\r\nAllowableMoves.p1OrdinaryCanJump = function(analyze) {\r\n  if ( ( (analyze.a === 2) && (analyze.c === 0) ) ||      // p1 forward jump to C\r\n       ( (analyze.b === 2) && (analyze.d === 0) ) ) {     // p1 forward jump to D\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\nAllowableMoves.p1KingCanJump = function(analyze) {\r\n  if ( ( (analyze.e === 2) && (analyze.g === 0) ) ||      // p1 backward jump to G\r\n       ( (analyze.f === 2) && (analyze.h === 0) ) ) {     // p1 backward jump to H\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\nAllowableMoves.p2OrdinaryCanJump = function(analyze) {\r\n  if ( ( (analyze.e === 1) && (analyze.g === 0) ) ||      // p2 forward jump to G\r\n       ( (analyze.f === 1) && (analyze.h === 0) ) ) {     // p2 forward jump to H\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\nAllowableMoves.p2KingCanJump = function(analyze) {\r\n  if ( ( (analyze.a === 1) && (analyze.c === 0) ) ||      // p2 backward jump to C\r\n       ( (analyze.b === 1) && (analyze.d === 0) ) ) {     // p2 backward jump to D\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nmodule.exports = AllowableMoves;","// display.js\r\n\r\n\"use strict\";\r\n\r\nvar Game = require('./game.js');\r\n\r\nvar Display = {};\r\nvar moveObj = {};\r\n\r\nDisplay.drawBoard = function(){\r\n  var row, col;\r\n  var htmlString = \"\";\r\n  for (row = 0; row < 8; row++) {\r\n    for (col = 0; col < 8; col++) {\r\n      let squareColor = (row + col) % 2 === 0 ? \"#DDD\" : \"black\";\r\n      let player = Game.matrix[row][col];\r\n      htmlString += `<img src='img/player${player}.png' style='background-color:${squareColor}' class='row${row} col${col} p${player}'>`;\r\n    }\r\n  }\r\n  $(\"#board\").html(htmlString);\r\n};\r\n\r\nmodule.exports = Display;","\"use strict\";\r\n\r\n//let Player = require('./player.js');  // for some reason we crash if Player is required here\r\nlet AllowableMoves = require('./allowablemoves.js');\r\n\r\nlet Game = {\r\n//   newMatrix:       [[0,0,0,2,0,2,0,2],\r\n//                     [2,0,1,0,2,0,2,0],\r\n//                     [0,2,0,2,0,2,0,2],\r\n//                     [0,0,0,0,0,0,0,0],\r\n//                     [0,0,0,0,0,0,0,0],\r\n//                     [1,0,1,0,1,0,1,0],\r\n//                     [0,1,0,2,0,1,0,1],\r\n//                     [1,0,1,0,0,0,1,0]]\r\n// };\r\n  newMatrix:       [[0,0,0,0,0,0,0,0], // game over b/c no moves for P2\r\n                    [0,0,0,0,2,0,0,0],\r\n                    [0,0,0,0,0,0,0,0],\r\n                    [0,0,2,0,2,0,0,0],\r\n                    [0,0,0,0,0,0,0,0],\r\n                    [1,0,2,0,1,0,1,0],\r\n                    [0,1,0,-1,0,1,0,1],\r\n                    [1,0,1,0,1,0,1,0]]\r\n};\r\n\r\nGame.doMove = function(moveObj) {\r\n  // first, validate that moveObj defines a valid move\r\n  let message = Game.validate(moveObj);\r\n  console.log(\"msg\",message);\r\n  $(\"#msg\").html(message);\r\n\r\n  if (message.indexOf(\"OK\") >= 0) {  // move is valid\r\n    // is this piece getting promoted to king?\r\n    if ((moveObj.player === 1) && (moveObj.dRow === 0)) {\r\n      moveObj.player = -1; // king player 1!\r\n    }\r\n    if ((moveObj.player === 2) && (moveObj.dRow === 7)) {\r\n      moveObj.player = -2; // king player 2!\r\n    }\r\n    // move player piece\r\n    Game.matrix[moveObj.oRow][moveObj.oCol] = 0;\r\n    Game.matrix[moveObj.dRow][moveObj.dCol] = moveObj.player;\r\n    // return with exit code = success\r\n    return 0;\r\n  }\r\n  return -1;\r\n};\r\n\r\nGame.validate = function(moveObj) {\r\n  // attempting a jump?\r\n  if ((Math.abs(moveObj.oRow - moveObj.dRow) === 2) && \r\n      (Math.abs(moveObj.oCol - moveObj.dCol) === 2) ) {\r\n    var jumpRow = (moveObj.oRow + moveObj.dRow) / 2;\r\n    var jumpCol = (moveObj.oCol + moveObj.dCol) / 2;\r\n    var otherPlayer = Math.abs(moveObj.player) === 1 ? 2 : 1;\r\n    if (Math.abs(Game.matrix[jumpRow][jumpCol]) === otherPlayer) {\r\n      Game.matrix[jumpRow][jumpCol] = 0;  // remove jumped piece from board\r\n      return \"jump OK!\";\r\n    } else {\r\n      return \"nothing to jump!\";\r\n    }\r\n  }\r\n  // backward move by ordinary piece? only kings can move backward.\r\n  if (((moveObj.player === 1) && (moveObj.dRow > moveObj.oRow ) ) ||\r\n      ((moveObj.player === 2) && (moveObj.dRow < moveObj.oRow ) ) ) {\r\n    return \"this piece can only move forward\";\r\n  }\r\n  // ordinary move?\r\n  if ((Math.abs(moveObj.oRow - moveObj.dRow) === 1) && \r\n      (Math.abs(moveObj.oCol - moveObj.dCol) === 1) ) {\r\n    return \"OK\";\r\n  }\r\n  // if move is not expressly permitted, it's forbidden\r\n  return \"unspecified error\";\r\n};\r\n\r\nGame.moreJumpsAvailable = function(row,col) {\r\n  let analyze = AllowableMoves.buildAnalyzeGrid(Game.matrix,row,col);\r\n  switch(analyze.x) {\r\n    case 1:\r\n      return AllowableMoves.p1OrdinaryCanJump(analyze);\r\n    case -1:\r\n      return AllowableMoves.p1OrdinaryCanJump(analyze) || AllowableMoves.p1KingCanJump(analyze);\r\n    case 2:\r\n      return AllowableMoves.p2OrdinaryCanJump(analyze);\r\n    case -2:\r\n      return AllowableMoves.p2OrdinaryCanJump(analyze) || AllowableMoves.p2KingCanJump(analyze);\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\nGame.isGameOver = function(whoseTurn) {\r\n  let row, col;\r\n  for (row = 0; row < 8; row++) {\r\n    for (col = 0; col < 8; col++ ) {\r\n      if (Math.abs(Game.matrix[row][col]) !== whoseTurn) {\r\n        continue;  // next column\r\n      }\r\n      var analyze = AllowableMoves.buildAnalyzeGrid(Game.matrix,row,col);\r\n\r\n      let canMove = true;\r\n      switch(analyze.x) {\r\n        case 1:\r\n          canMove = AllowableMoves.p1Ordinary(analyze);\r\n          break;\r\n        case -1:\r\n          canMove = AllowableMoves.p1Ordinary(analyze) || AllowableMoves.p1King(analyze);\r\n          break;\r\n        case 2:\r\n          canMove = AllowableMoves.p2Ordinary(analyze);\r\n          break;\r\n        case -2:\r\n          canMove = AllowableMoves.p2Ordinary(analyze) || AllowableMoves.p2King(analyze);\r\n          break;\r\n      }\r\n      if (canMove) {\r\n        return false;  // return \"game is not over\"\r\n      } else {\r\n        continue;  // test next board square\r\n      }\r\n    }  // end for col\r\n  }  // end for row\r\n  // if we get to this point without returning,\r\n  // this player either has zero pieces or has no moves available\r\n  // meaning, game is over\r\n  return true;\r\n};\r\n\r\nmodule.exports = Game;","\"use strict\";\r\n\r\nlet Game = require('./game.js');\r\nlet Player = require('./player.js');\r\n//let Display = require('./display.js');\r\n\r\nGame.matrix = Game.newMatrix;\r\n\r\nPlayer.go();","// player.js\r\n\r\n\"use strict\";\r\n\r\nlet Game = require('./game.js');\r\nlet Display = require('./display.js');\r\n\r\nlet Player = {\r\n  whoseTurn: 1,  // player 1 goes first\r\n  assignListeners: function() {\r\n    var moveObj = {};  // re-initialize moveObj\r\n\r\n    // ordinary pieces\r\n    $(`.p${Player.whoseTurn}`).on(\"mousedown\",function(event){  // note: dynamically-created DOM element\r\n      moveObj.oRow = parseInt(event.target.className.charAt(3));\r\n      moveObj.oCol = parseInt(event.target.className.charAt(8));\r\n      moveObj.player = Player.whoseTurn;\r\n      return false;\r\n    });\r\n\r\n    // kings\r\n    $(`.p${Player.whoseTurn * -1}`).on(\"mousedown\",function(event){  // note: dynamically-created DOM element\r\n      moveObj.oRow = parseInt(event.target.className.charAt(3));\r\n      moveObj.oCol = parseInt(event.target.className.charAt(8));\r\n      moveObj.player = Player.whoseTurn * -1;\r\n      return false;\r\n    });\r\n\r\n    $(\".p0\").on(\"mouseup\",function(event){\r\n      moveObj.dRow = parseInt(event.target.className.charAt(3));\r\n      moveObj.dCol = parseInt(event.target.className.charAt(8));\r\n      let exit_code = Game.doMove(moveObj);\r\n      if (exit_code === 0) { // move was valid\r\n        if (Game.moreJumpsAvailable(moveObj.dRow,moveObj.dCol)) {\r\n          $(\"#msg\").html(`Player ${Player.whoseTurn} keep jumpin'!`);\r\n        } else {\r\n          Player.whoseTurn = Player.whoseTurn === 1 ? 2 : 1;  // switch players\r\n        }\r\n      }\r\n      Player.go();\r\n    });\r\n  },\r\n  go: function() {\r\n    Display.drawBoard();\r\n    // check for game over:  current player has > 0 pieces and has valid moves?\r\n    if (Game.isGameOver(Player.whoseTurn)) {\r\n      $(\"#whoseTurn\").html(\"Game Over!\");\r\n    } else {\r\n      Player.assignListeners(Player.whoseTurn);\r\n      $(\"#whoseTurn\").html(`Player ${Player.whoseTurn} go!`);\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = Player;"]}